#include <stdio.h>
#include <stdlib.h>
#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/err.h>

void clear_resources(BIO *bp_public, BIO *bp_private, RSA *rsa, BIGNUM *bignum) {
    if (bp_public) BIO_free_all(bp_public);
    if (bp_private) BIO_free_all(bp_private);
    if (rsa) RSA_free(rsa);
    if (bignum) BN_free(bignum);
}

int main() {
    int ret = 0;
    RSA *rsa = NULL;
    BIGNUM *bignum = NULL;
    BIO *bp_public = NULL, *bp_private = NULL;
    int bits = 2048;
    unsigned long e = RSA_F4;

    // 1. Initialize BIGNUM
    bignum = BN_new();
    if (!bignum) {
        fprintf(stderr, "Error allocating BIGNUM\n");
        return EXIT_FAILURE;
    }

    ret = BN_set_word(bignum, e);
    if (ret != 1) {
        fprintf(stderr, "Error setting exponent\n");
        clear_resources(bp_public, bp_private, rsa, bignum);
        return EXIT_FAILURE;
    }

    // 2. Generate RSA key
    rsa = RSA_new();
    if (!rsa) {
        fprintf(stderr, "Error allocating RSA\n");
        clear_resources(bp_public, bp_private, rsa, bignum);
        return EXIT_FAILURE;
    }

    ret = RSA_generate_key_ex(rsa, bits, bignum, NULL);
    if (ret != 1) {
        fprintf(stderr, "Error generating RSA key\n");
        clear_resources(bp_public, bp_private, rsa, bignum);
        return EXIT_FAILURE;
    }

    // 3. Save the public key
    bp_public = BIO_new_file("public.pem", "w+");
    if (!bp_public) {
        fprintf(stderr, "Error opening public key file\n");
        clear_resources(bp_public, bp_private, rsa, bignum);
        return EXIT_FAILURE;
    }

    ret = PEM_write_bio_RSAPublicKey(bp_public, rsa);
    if (ret != 1) {
        fprintf(stderr, "Error writing public key file\n");
        clear_resources(bp_public, bp_private, rsa, bignum);
        return EXIT_FAILURE;
    }

    // 4. Save the private key
    bp_private = BIO_new_file("private.pem", "w+");
    if (!bp_private) {
        fprintf(stderr, "Error opening private key file\n");
        clear_resources(bp_public, bp_private, rsa, bignum);
        return EXIT_FAILURE;
    }

    ret = PEM_write_bio_RSAPrivateKey(bp_private, rsa, NULL, NULL, 0, NULL, NULL);
    if (ret != 1) {
        fprintf(stderr, "Error writing private key file\n");
        clear_resources(bp_public, bp_private, rsa, bignum);
        return EXIT_FAILURE;
    }

    printf("RSA public and private keys have been generated\n");

    // Free resources
    clear_resources(bp_public, bp_private, rsa, bignum);

    return EXIT_SUCCESS;
}
